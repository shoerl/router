#!/usr/bin/env -S python3 -u

import argparse, socket, time, json, select, struct, sys, math


def split_by_period_and_get_int_array(addr):
    """
    Split string by period and turn each portion into int, then return that int array
    Args:
        addr - string represnting address/mask (example: '255.255.255.0')
    Returns:
        array of ints - representing each int in mask (example: [255, 255, 255, 0])
    """
    return [int(x) for x in addr.split(".")]

def get_count_of_non_zero_bits(addr):
    """
    Return count of non-zero bits in the binary representation of our address/mask
    Args:
        addr - string representing address/mask (example: '255.255.255.0')
    Returns:
        int - representing count of non-zero (one) bits 
    """
    count = 0
    int_array = split_by_period_and_get_int_array(addr)
    for num in int_array:
        count += bin(num).count("1")
    return count

def split_by_period_and_get_bin_array(addr):
    """
    Split addr into int array and then convert each item in
    array to binary representation of int (8 bits padded)
    Args:
        addr - string representing address/mask (example: '255.255.255.0')
    Returns:
        array of strings - representing 8 bit padded binary equivilant of each int 
        (example: ['11111111', '11111111', '11111111', '00000000'])

    """
    arr = split_by_period_and_get_int_array(addr)
    return list(map(lambda x: '{:08b}'.format(x), arr))

def get_idx_of_last_one(bin_array):
    """
    Get index of last one bit in array of strings representing binary
    Args:
        bin_array - array of strings representing binary (ex: ['1111', '1110'])
    Returns:
        tuple - representing index of last 1 (ex: (1, 2))
    """
    last_idx = (-1, -1)
    for idx, arr in enumerate(bin_array):
        for idx2, ch in enumerate(arr):
            if ch == '0':
                return last_idx
            else:
                last_idx = (idx, idx2)
    return last_idx

def flip_last_one(to_search, to_flip):
    """
    Find index of last one bit in to_search, and flip corresponding bit in to_search
    Example: to_search = '255.255.255.0', to_flip = '255.255.0.0', return '255.255.1.0'
    Args:
        to_search - string representing address/mask to find last one in Example: '255.255.255.0'
        to_flip - string representing address/mask to flip bit in position of last one in to_search
    Returns:
        string - representing to_flip address/mask with flipped bit
    """
    to_search_bin = split_by_period_and_get_bin_array(to_search)
    to_flip_bin = split_by_period_and_get_bin_array(to_flip)

    idx1, idx2 = get_idx_of_last_one(to_search_bin)
    # Turn string into array of characters so we can modify it easily
    to_flip_bin[idx1] = list(to_flip_bin[idx1])
    to_flip_bin[idx1][idx2] = '1' if to_flip_bin[idx1][idx2] == '0' else '0'
    to_flip_bin[idx1] = "".join(to_flip_bin[idx1])

    to_flip_int = list(map(lambda x: int(x, 2), to_flip_bin))
    return "%d.%d.%d.%d" % (to_flip_int[0], to_flip_int[1], to_flip_int[2], to_flip_int[3])


def dict_all_properties_same(entry1, entry2, keys):
    """
    Do these two dictionarys contain the same values for all of the keys given?
    Args:
        entry1 - dictionary
        entry2 - dictionary
        keys - list of strings representing keys in dictionarys
    Returns:
        boolean - representing whether these two dictionary entrys contain the same values for all of the keys given
    """
    return all(list(map(lambda key: entry1[key] == entry2[key], keys)))


class Router:
    """
    Class representing a BGP Router.
    """
    relations = {}
    sockets = {}
    ports = {}
    forwarding_table = []
    update_cache = []
    withdrawal_cache = []

    def __init__(self, asn, connections):
        # print startup message
        print("Router at AS %s starting up" % asn)
        self.asn = asn
        for relationship in connections:
            port, neighbor, relation = relationship.split("-")
            self.sockets[neighbor] = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
            self.sockets[neighbor].bind(('localhost', 0))
            self.ports[neighbor] = int(port)
            self.relations[neighbor] = relation
            self.send(neighbor, json.dumps({ "type": "handshake", "src": self.our_addr(neighbor), "dst": neighbor, "msg": {}  }))

    def our_addr(self, dst):
        """
        Produces this router's address from the given network.
        Args:
            dst : str of the network
        Returns: 
            network str
        """
        quads = list(int(qdn) for qdn in dst.split('.'))
        quads[3] = 1
        return "%d.%d.%d.%d" % (quads[0], quads[1], quads[2], quads[3])

    def send(self, network, message):
        """
        Sends the given message to the given network, using sockets.
        Args:
            network: str network address
            message: str message data to send
        """
        self.sockets[network].sendto(message.encode('utf-8'), ('localhost', self.ports[network]))

    def send_update_messages(self, srcif, deserialized_update_msg):
        """
        Send update message to all networks we have in our router (except for one we recieved it from)
        Args:
            srcif - string representing network which we recieved update message from
            deserialized_update_msg - dictionary representing inner msg in update message we recieved
        """
        # if true, we must have gotten from peer or provider, so only send updates to customers
        only_customers = self.relations[srcif] != 'cust'
        update_msg = {'msg': {}, 'type': 'update'}
        update_msg['msg']['netmask'] = deserialized_update_msg['netmask']
        update_msg['msg']['ASPath'] = [self.asn] + deserialized_update_msg['ASPath']
        update_msg['msg']['network'] = deserialized_update_msg['network']
        for network in self.sockets.keys():
            # if network is source of message or only sending updates to customers and this network is not a customer
            if network == srcif or (only_customers and self.relations[network] != 'cust'):
                continue
            update_msg['src'] = self.our_addr(network)
            update_msg['dst'] = network
            self.send(network, json.dumps(update_msg))

    def send_withdraw_message(self, srcif, deserialized_withdraw_msg):
        """
        Send withdraw message to all networks we have in our router (except for one we recieved it from)
        Args:
            srcif - string representing network which we recieved withdrawal message from
            deserialized_update_msg - dictionary representing inner msg in withdrawal message we recieved
        """
        # if true, we must have gotten from peer or provider, so only send updates to customers
        only_customers = self.relations[srcif] != 'cust'
        deserialized_withdraw_msg = {'msg': deserialized_withdraw_msg, 'type': 'withdraw'}
        for network in self.sockets.keys():
            # if network is source of message or only sending updates to customers and this network is not a customer
            if network == srcif or (only_customers and self.relations[network] != 'cust'):
                continue
            deserialized_withdraw_msg['src'] = self.our_addr(network)
            deserialized_withdraw_msg['dst'] = network
            self.send(network, json.dumps(deserialized_withdraw_msg))


    def add_to_update_cache(self, full_deserialized_update_msg):
        """ 
        Adds the given message to the update cache.
        Args: 
            full_deserialized_update_msg: dict full deserialized message with src, dest, etc
        """
        self.update_cache.append(full_deserialized_update_msg)

    def add_to_withdrawal_cache(self, full_deserialized_withdraw_msg):
        """
        Adds the given message to the withdrawal cache.
        Args: 
            full_deserialized_update_msg: dict full deserialized message with src, dest, etc
        """
        self.withdrawal_cache.append(full_deserialized_withdraw_msg)

    def add_to_forwarding_table(self, next_hop, deserialized_update_msg):
        """
        Adds the given message to the forwarding table with its peer key being the given next_hop.
        Args: 
            deserialized_update_msg: dict deserialized message with inner update message
            next_hop: str network next hop
        """
        deserialized_update_msg['peer'] = next_hop
        self.forwarding_table.append(deserialized_update_msg)

    def compare_entries_and_get_best(self, entry1, entry2):
        """
        Compare forwarding table entries and return best, using rules outlined in project spec
        This function has the constraint that entry2 will never be an empty dictionary, but entry1 may be
        Args:
            entry1 - dictionary representing forwarding table entry
            entry2 - dictionary representing forwarding table entry
        Returns:
            dictionary - representing the best forwarding table entry
        """
        if not entry1:
            return entry2
        # Netmask count here represents the number of 1's in the binary representation
        # of the netmask
        entry1_netmask_count = get_count_of_non_zero_bits(entry1['netmask'])
        entry2_netmask_count = get_count_of_non_zero_bits(entry2['netmask'])
        same_prefix_len = entry1_netmask_count == entry2_netmask_count
        same_local_pref = entry1['localpref'] == entry2['localpref']
        same_self_origin = entry1['selfOrigin'] == entry2['selfOrigin']
        same_as_path_len = len(entry1['ASPath']) == len(entry2['ASPath'])
        same_origin = entry1['origin'] == entry2['origin']
        origin_dict = {"IGP": 2, "EGP": 1, "UNK": 0}
        if entry2_netmask_count > entry1_netmask_count:
            return entry2
        elif same_prefix_len and entry2['localpref'] > entry1['localpref']:
            return entry2
        elif same_prefix_len and same_local_pref and entry2['selfOrigin'] and not entry1['selfOrigin']:
            return entry2
        elif same_prefix_len and same_local_pref and same_self_origin and len(entry2['ASPath']) < len(entry1['ASPath']):
            return entry2
        elif same_prefix_len and same_local_pref and same_self_origin and same_as_path_len and origin_dict[entry2['origin']] > origin_dict[entry1['origin']]:
            return entry2
        elif same_prefix_len and same_local_pref and same_self_origin and same_as_path_len and same_origin and entry2['peer'] < entry1['peer']:
            return entry2
        else:
            return entry1

    def find_best_match(self, dst_if):
        """
        Given destination ip, find best entry in our route cache table, and return peer address of that match
        Args:
            dst_if: str IP
        Returns:
            string: peer address of best match in forwarding table, or empty string if there is none
        """
        best_entry_so_far = {}
        for entry in self.forwarding_table:
            msk_int = split_by_period_and_get_int_array(entry['netmask'])
            dst_int = split_by_period_and_get_int_array(dst_if)
            ntwrk_int = split_by_period_and_get_int_array(entry['network'])
            match = True

            for i in range(len(msk_int)):
                if ntwrk_int[i] != (msk_int[i] & dst_int[i]):
                    match = False

            if not match:
                # Fail fast, also to remove nesting for all of the comparision
                # checking that needs to be done
                continue

            best_entry_so_far = self.compare_entries_and_get_best(best_entry_so_far, entry)

        if best_entry_so_far:
            return best_entry_so_far['peer']
        else:
            return ""       


    def send_data_message(self, deserialized_data_msg, srcif):
        """
        Given deserialized data message and src ip, send data message to best match, 
        or no route message if there is no best match or if forwarding this message isn't advantageous to us
        Args:
            deserialized_data_msg: dictionary representing deserialized data message that we recieved in our router
            srcif: string representing source network we recieved data message from
        """
        ip_to_send_to = self.find_best_match(deserialized_data_msg['dst'])
        # Is our src or destination a customer?
        src_or_dest_customer = self.relations[srcif] == "cust" or self.relations[ip_to_send_to] == "cust"
        if src_or_dest_customer and ip_to_send_to:
            self.send(ip_to_send_to, json.dumps(deserialized_data_msg))
        else:
            no_route_msg = {'src': self.our_addr(srcif),
                            'dst': deserialized_data_msg['src'],
                            'type': 'no route',
                            'msg': {}}
            self.send(srcif, json.dumps(no_route_msg))
            # send message saying theres no match


    def send_dump_message(self, src, dst):
        self.send(dst,
                  json.dumps({'src': src,
                              'dst': dst,
                              'type': 'table', 
                              'msg': self.forwarding_table}))


    def rebuild_forwarding_table_from_scratch(self):
        """
        Clear our forwarding table, add all of our entries back from update cache, 
        remove all entries from withdrawal cache, aggregate as many times as needed
        """
        self.forwarding_table.clear()
        for entry in self.update_cache:
            self.add_to_forwarding_table(entry['src'], entry['msg'])
        for entry in self.withdrawal_cache:
            self.remove_from_forwarding_table(entry['src'], entry['msg'])
        # loop aggregation incase we need to aggregate more than one entry
        self.loop_aggregation()


    def remove_from_forwarding_table(self, srcif, networks):
        """
        Remove the entries in our forwarding table that correspond with the networks in networks array and source of withdrawal message
        Args:
            srcif: str network address representing address that sent withdrawal message
            networks: list of networks that we want to remove from forwarding table
        """
        rebuild_and_retry = False
        for network_entry in networks:
            before_len = len(self.forwarding_table)
            # forwarding table is all of the entries that do not share the network_entry information
            self.forwarding_table = list(filter(lambda entry: (not (dict_all_properties_same(entry, network_entry, ['network', 'netmask']) and entry['peer'] == srcif)), self.forwarding_table))
            if before_len == len(self.forwarding_table):
                # We are going to have to rebuild everything, so break out of this loop/function after we are done
                # as the forwarding table will be different + we will handle removing entries seperately there too
                # so we don't want to remove anything twice
                self.rebuild_forwarding_table_from_scratch()
                break

    def get_neighboring_entry(self, network, netmask):
        """
        Produces the neighboring forwarding table entry next to the given network/netmask pair.
        Args:
            network: str network address
            netmask: str bit netmask
        """
        return flip_last_one(netmask, network)

    def get_entry_pair_to_aggregate(self):
        """
        Produces the entry pair to aggregate in the forwarding table.
        Returns:
            tuple of two entries which can be aggregated, or empty tuple if no entries to aggregate
        """
        for entry in self.forwarding_table:
            neighbor_ntwk = self.get_neighboring_entry(entry['network'], entry['netmask'])
            for entry2 in self.forwarding_table:
                # if comparing the same entry, skip
                if entry == entry2:
                    continue
                # if comparing entries with different localpref, ASPath, origin, selfOrigin, or peer
                if not dict_all_properties_same(entry, entry2, ['localpref', 'ASPath', 'origin', 'selfOrigin', 'peer']):
                    continue
                # if comparing entries with same netmask and network neighbors
                if neighbor_ntwk == entry2['network'] and entry['netmask'] == entry2['netmask']:
                    return (entry, entry2)
        return ()

    def loop_aggregation(self):
        """
        Helper function for handling rebuilding table, keep aggregating until aggregating
        produces table of same size
        """
        old_len = len(self.forwarding_table)
        self.aggregate()
        if len(self.forwarding_table) != old_len:
            self.loop_aggregation()

    def aggregate(self):
        """
        Aggregates the necessary forwarding table entries.
        """
        entries = self.get_entry_pair_to_aggregate()
        # if no entries to aggregate, don't
        if not entries:
            return

        # Whatever network address is lower will be the new network in aggregated entry
        if entries[0]['network'] < entries[1]['network']:
            new_entry = entries[0].copy()
        else:
            new_entry = entries[1].copy()

        new_entry['netmask'] = flip_last_one(new_entry['netmask'], new_entry['netmask'])

        self.forwarding_table.remove(entries[0])
        self.forwarding_table.remove(entries[1])
        self.forwarding_table.append(new_entry)


    def run(self):
        """
        Runs the router logic.
        """
        while True:
            socks = select.select(self.sockets.values(), [], [], 0.1)[0]
            for conn in socks:
                k, addr = conn.recvfrom(65535)
                srcif = None
                for sock in self.sockets:
                    if self.sockets[sock] == conn:
                        srcif = sock
                        break
                msg = k.decode('utf-8')

                print("Received message '%s' from %s" % (msg, srcif))
                msg_json = json.loads(msg)
                type = msg_json['type']
                if type == 'update':
                    self.add_to_update_cache(msg_json)
                    self.add_to_forwarding_table(srcif, msg_json['msg'])
                    self.send_update_messages(srcif, msg_json['msg'])
                    self.aggregate()
                elif type == 'data':
                    self.send_data_message(msg_json, srcif)
                elif type == 'dump':
                    self.send_dump_message(msg_json['dst'], msg_json['src'])
                elif type == 'withdraw':
                    self.add_to_withdrawal_cache(msg_json)
                    self.remove_from_forwarding_table(srcif, msg_json['msg'])
                    self.send_withdraw_message(srcif, msg_json['msg'])

if __name__ == "__main__":
    """
    Main entrypoint of the 3700router program.
    """
    parser = argparse.ArgumentParser(description='route packets')
    parser.add_argument('asn', type=int, help="AS number of this router")
    parser.add_argument('connections', metavar='connections', type=str, nargs='+', help="connections")
    args = parser.parse_args()
    router = Router(args.asn, args.connections)
    router.run()
